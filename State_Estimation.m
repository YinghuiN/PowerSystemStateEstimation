%{
*****************************************************************************************
程序名称：电力系统状态估计程序 v1.0
          State Estimation Based on Fast Decoupled Method
程序功能：电力系统状态估计          
数据格式：基于matpower数据
（1）bus 母线参数矩阵
          1   节点编号（正整数）（1~29997）
          2   节点类型
                  PQ节点     = 1
                  PV节点     = 2
                  参考节点   = 3
                  孤立节点   = 4（未工作节点）
          3   Pd, 节点注入有功功率 (MW)
          4   Qd, 节点注入无功功率 (MVAr)
          5   Gs, 节点并联电导（MW   在V = 1.0 p.u.时消耗）
          6   Bs, 节点并联电纳（MVAr 在V = 1.0 p.u.时注入）
          7   area, 该母线所属电网断面号（一般是1）
          8   Vm, 电压幅值 (p.u.)
          9   Va, 电压相角 (degrees)
      (-)     (bus name)
          10  baseKV, 基准电压 (kV)
          11  zone, 母线的所属消耗区域，一般是1。用于最优潮流计算
      (+) 12  maxVm, 工作时母线电压最高允许幅值（标幺值）
      (+) 13  minVm, 工作时母线电压最低允许幅值（标幺值）
--------------------------------------------------------------------------
（2）branch 支路参数矩阵
          1   f, 支路起点节点编号
          2   t, 支路终点节点编号
      (-)     (电路标识符)
          3   r, 电阻 (p.u.)
          4   x, 电抗 (p.u.)
          5   b, 线路总充电电纳 (p.u.)
          6   rateA, MVA 支路长期传输能力，允许功率，对于无限制时设为0
          7   rateB, MVA 支路短期传输能力，允许功率，对于无限制时设为0
          8   rateC, MVA 支路紧急状态传输能力，允许功率，对于无限制时设为0
          9   ratio, 支路变比（导线为0），即变压器起始母线和终止母线的电压幅值（标幺值）之比。
                      若r=x=b=0,则为Vf/Vt。
          10  angle, 变压器转换角度 (degrees), positive => delay
      (-)     (Gf, 支路起始侧并联电导 p.u.)
      (-)     (Bf, 支路终止侧并联电纳 p.u.)
      (-)     (Gt, 支路终止侧并联电导 p.u.)
      (-)     (Bt, 支路起始侧并联电纳 p.u.)
          11  status，初始支路状态, 1-运行, 0-退出
      (2) 12  angmin，最小电压相角差, angle(Vf)-angle(Vt) (degrees)
      (2) 13  angmax，最大电压相角差, angle(Vf) - angle(Vt) (degrees)
              (电压相角差在下列情况下被认为是无界的
               如果ANGMIN <-360并且如果ANGMAX> 360则无限制。
               如果两个参数都为零，则它是不受约束的。)
--------------------------------------------------------------------------
（3）mdata 量测参数矩阵
          1   量测类型（支路没必要区分变压器与线路，本质都是Pi等效电路）
              0 - 节点电压
              1 - 节点注入有功
              2 - 节点注入无功
              3 - 支路首端有功
              4 - 支路首端无功
             -3 - 支路末端有功
             -4 - 支路末端无功
          2   量测量
          3   量测误差
          4   量测量真值
          5   权重系数
          6   首（起始）节点
          7   末（终止）节点（对于节点量测首末节点相同）
          8   量测量对应支路号
数据说明：数据名称	节点数	量测量总数	冗余度K	量测噪声标准差σ
        cr14_1	    14	   119	       4.407	  0.001
        cr57_1	    57	   461	       4.080	  0.001
        cr118_1	    118	   1060        4.511	  0.001
        cr736_1	    736	   5208        3.540	  0.001
        cr2383wp_1	2383   17533	   3.680	  0.001

        cr14_2	    14	   119	       4.407	  0.020
        cr57_2	    57	   461	       4.080	  0.020
        cr118_2	    118	   1060        4.511	  0.020

        cr14_3	    14	   79	       2.926	  0.001
        cr57_3	    57	   301	       2.664	  0.001
        cr118_3	    118	   688	       2.928	  0.001

        cr14_4	    14	   79	       2.926	  0.02
        cr57_4	    57	   301	       2.664	  0.02
        cr118_4	    118	   688	       2.928	  0.02
注意事项：
        （1）数据文件读取用eval('cr14_1')语句
        （2）变压器支路和普通支路没有分开，如果需要分开，可以自己在程序中用变压器变比来区分
        （3）数据文件中的bus矩阵第6列由于单位原因，在程序中需要除以100后再使用
        （4）关于参考节点：14 bus在节点1；57 bus在节点1；118 bus在节点69；2383 bus在节点18
        （5）57节点（4-18、24-25）、118节点存在双回路问题
        （6）后缀“_1”表示冗余度很高（3.5-4.5），量测噪声标准差为0.001；
             后缀“_2”表示冗余度较低（2.0-2.5），量测噪声标准差为0.001；
             后缀“_3”表示冗余度较低（2.5-3.0），量测噪声标准差为0.001；
             后缀“_4”表示冗余度较低（2.5-3.0），量测噪声标准差为0.020。
-------------------------------------------------------------------------------
创 建 人：【漆家炜】
创建时间：【2017年03月09日】
-------------------------------------------------------------------------------
更    新：【2017.03.21】 程序大体框架完成，包括根据输入数据生成节点导纳矩阵、生成常数雅克比
                         矩阵、计算h量、进行迭代、输出程序等模块。需分块调试测试
          【2017.03.28】 程序反复调试多天，修改了导纳矩阵，进行比较发现正确，测试了h计算程
                         序，发现结果正确。但是迭代一直不收敛，原因未知；考虑了采用节点次序
                         优化程序，即参考节点识别后放最后一个，其他元素依次前移
          【2017.04.05】 与实验室师兄探讨程序，发现雅克比矩阵中关于支路型量测量的元素符号存
                         在问题，没有正确区分支路g+jb与导纳矩阵中G+jB的关系（导纳矩阵互导
                         纳为负值），故雅克比元素中取值需要区分正负
          【2017.04.08】 修改程序并完善，去除节点次序优化程序，采用删除雅克比矩阵中多余行问
                         题，目前测试例题4节点、IEEE 14节点结果符合要求；57节点出现问题，即
                         18、19、20、25、30、31、32、33号节点估计值偏差太大
          【2017.04.29】 发现57、118节点存在双回路，故程序导纳矩阵生成有一定问题，体现在互导
                         纳求取问题上，Yr(I,J)应取Yr(I,J)-Yt，而不是0-Yt；已实现57、118节点
          【2017.05.01】 优化常数雅克比公式，迭代次数降低，精度提高
          【2017.05.08】 加入量测量契合度计算
          【2017.05.17】 编写总程序，可以选择测试算例、选择算法等
*****************************************************************************************
%}

clear all;
clc;
[bus,branch,mdata,pfresult,draw_flag,alg_flag] = input_choose();
cycle = 1;                                                                  % 设置循环次数，默认为1，100次用于求平均收敛时间
if alg_flag == 0                                                            % alg_flag=0选择WLSM
    t1 = clock;
    for n = 1:cycle
        [Y,nodeRe] = getYmatrix1(bus,branch); 
        ampV0 = bus(nodeRe,8);
        angV0 = bus(nodeRe,9)*pi/180;
        [ampV,angV,iter,z,h] = iteration1(bus,branch,mdata,Y,ampV0,angV0,nodeRe);
    end
    t2 = clock;
    runtime = etime(t2,t1)/cycle;
    ksi = Intde1(mdata,z,h);
else                                                                        % alg_flag=1选择FDM
    t1 = clock;
    for n = 1:cycle
        [Ya,Yr,nodeRe] = getYmatrix(bus,branch);                            % 得到全网导纳矩阵
        ampV0 = bus(nodeRe,8);
        angV0 = bus(nodeRe,9)*pi/180;
        [Ba,Br] = getBmatrix(Ya,Yr,branch,mdata,nodeRe,ampV0);              % 计算常数雅克比矩阵
        [ampV,angV,iter,Za,Zr,ha,hr] = iteration(bus,branch,mdata,ampV0,angV0,Yr,Ba,Br,nodeRe); % 迭代计算
    end
    t2 = clock;
    runtime = etime(t2,t1)/cycle;                                           % 计算时间
    ksi = Intde(mdata,Za,Zr,ha,hr);                                         % 求契合度
end
output(alg_flag,draw_flag,pfresult,ampV,angV,iter,runtime,ksi);             % 输出显示

